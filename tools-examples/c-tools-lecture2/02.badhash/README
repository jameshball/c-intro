This is an example on how to detect memory leaks in a simple
(but slightly buggy) hash table module.

Put yourself in the following scenario:

- this hash table module passes all it's tests, and has been used
  successfully in several small projects, where each project created
  a SMALL number of LONGLIVED hash tables.

- but we are about to embed it into a much bigger system, that will
  create, populate, copy and destroy hash tables thousands of times
  per run.

- the voice of bitter experience: let's test that just in case something
  weird happens!

- so we write a new test program <<iterate N M>> that performs all previous
  tests repeatedly: N times, sleeping M seconds afterwards.

- when M=0 the run-time should be linear with N.  Test it:

- use time ./iterate N 0 for one data point

- use ./testme shell script to try several values of N

- graph the results in your head, or explicitly (gnuplot etc)

- It is linear from 0..23k iterations, run on an HP 800 G3 with
  16GB RAM.  But at 24k iterations and beyond, the process prints "Killed"
  and dies.  In the past, running this example, we have seen a much
  more prolonged "tail", where the whole machine becomes very slow after
  some cut-off point, but iterate doesn't get "Killed" immediately.

- What's happening?

- Try monitoring with top, running it by "top -o %MEM" to have it
  sort processes by memory used.

- Run iterate with a time delay:
   time ./iterate 24000 10

- and watch top!

- you'll see that:

  - iterate's memory grows continuously to over 80% of the
    machine's physical memory.

  - you may briefly see the iterate process go into "D" state, waiting
    for I/O - but what I/O, it doesn't do any?  it's SWAPPING.

  - then, very quickly, the Linux Out-of-Memory Killer kills the process.


Finding memory leaks
====================

- top showed us that iterate was leaking memory; and lots of it!

- Look for memory leaks with

  valgrind ./iterate

- valgrind confirms that some blocks are never freed, and suggests that
  you run it again with more detail:

  valgrind --leak-check=full ./iterate

  do that.  aha.  now valgrind suggests 4 linenos in hash.c to go look,
  where something was malloc()d but never free()d.  View those 4 lines in
  your favourite editor, what was allocated?  in what function?
  Were those elements ever freed?  Where should they have been freed?
  What functions perform the freeing?  go look at those functions.
  What might be happening?

  (Broad Hint, read only if you get stuck.....  look at hashFree and
  free_tree)

- Once you believe you know what the faults are, alter those functions
  and fix those memory leaks.  Save, recompile and rerun - monitoring
  with top, and also using valgrind again.

- Don't leave that chair until valgrind says there are no memory leaks.


An Alternative Way to find Memory Leaks
=======================================

Some C compilers, like gcc and clang, now come with "sanitizers",
ways of detecting (usually by extra run-time checks) various
problems - such as memory leaks, null pointer dereferences, and
generally undefined behaviour.  In particular the "undefined behaviour
sanitizer", aka "UBSan", and the "address sanitizer", aka "ASan"
are of use to us:

To use them, edit the Makefile and change the CC macro to:

CC	=	gcc -fsanitize=undefined -fno-sanitize-recover -fsanitize=address

and then 'make clean all' for a total rebuild.

Then run ./testhash (or ./iterate 1) and you get:

=================================================================
==3311033==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 260264 byte(s) in 1 object(s) allocated from:
    #0 0x7f46f1b53602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)
    #1 0x4015e5 in hashCreate /homes/dcw/docs/talks/c-tools-2020/L2/02.badhash/hash.c:73

Direct leak of 260264 byte(s) in 1 object(s) allocated from:
    #0 0x7fd379e08602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)
    #1 0x401a14 in hashCopy /homes/dcw/docs/talks/c-tools-2020/L2/02.badhash/hash.c:112
    ...

SUMMARY: AddressSanitizer: 520528 byte(s) leaked in 2 allocation(s).

This output is directly analaguous to valgrind's.
